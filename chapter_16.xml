<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "/usr/share/xml/docbook/xml-dtd-4.5/docbookx.dtd">

<chapter id="ch_network-utils">
<title>Basic Networking Utilities</title>

<para>
So you've finally managed to setup your network connection, now what?
How do you know that it's working? How do you know that you set it up
correctly? And just what do you do now that it's setup? Well this
chapter is for you.
</para>

<section id="network-utils_network-diagnostics">
<title>Network Diagnostic Tools</title>

<para>
Slackware Linux includes a great many networking tools for
troubleshooting and diagnosing network connection troubles, or just for
seeing what's out there on the network. Most of these tools are
command-line tools, so you can run them from a virtual terminal or in a
console window on your graphical desktop. A few of them even have
graphical front-ends, but we're going to deal almost exclusively with
command-line tools for now.
</para>

<section id="network-utils_ping">
<title>ping</title>

<para>
<application>ping</application>(8) is a handy tool for determining if a
computer is operational on your network or on the Internet at large.
You can think of as a type of sonar for computers. By using it, you
send out a "ping" and listen for an echo to determine if another
computer or network device is listening. By default,
<application>ping</application> checks for the remote computer once per
second indefinitely, but you can change the interval between checks and
the total number of checks easily, just check the man page. You can
terminate the application at any time with
<keycap>CTRL</keycap>-<keycap>c</keycap>. When
<application>ping</application> is finished, it displays a handy
summary of its activity. <application>ping</application> is very useful
for determining if a computer on your network or the Internet is
available, but some systems block the packets
<application>ping</application> sends, so sometimes a system may be
functioning properly, but still not send replies.
</para>


<screen><prompt>darkstar:~&#35; </prompt><userinput>ping -c 3 www.slackware.com</userinput>
64 bytes from slackware.com (64.57.102.34): icmp_seq=1 ttl=47 time=87.1 ms
64 bytes from slackware.com (64.57.102.34): icmp_seq=2 ttl=47 time=86.2 ms
64 bytes from slackware.com (64.57.102.34): icmp_seq=3 ttl=47 time=86.7 ms

--- slackware.com ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2004ms
rtt min/avg/max/mdev = 86.282/86.718/87.127/0.345 ms
</screen>

</section>

<section id="network-utils_traceroute">
<title>traceroute</title>

<para>
<application>traceroute</application>(8) is a handy tool for determining
what route your packets take to reach some other computer. It's mainly
of use for determining which computers are "near" or "far" from you.
This distance isn't strictly geographical, as your Internet Service
Provider may route traffic from your computer in strange ways.
<application>traceroute</application> shows you each router between
your computer and any other machine you wish to connect to.
Unfortunately, many providers, firewalls, and routers will block
<application>traceroute</application> so you might not get a complete
picture when using it. Still, it remains a handy tool for network
troubleshooting.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>traceroute www.slackware.com</userinput>
traceroute to slackware.com (64.57.102.34), 30 hops max, 46 byte
packets
 1  gw.ctsmacon.com (192.168.1.254)  1.468 ms  2.045 ms  1.387 ms
 2  10.0.0.1 (10.0.0.1)  7.642 ms  8.019 ms  6.006 ms
 3  68.1.8.49 (68.1.8.49)  10.446 ms  9.739 ms  7.003 ms
 4  68.1.8.69 (68.1.8.69)  11.564 ms  6.235 ms  7.971 ms
 5  dalsbbrj01-ae0.r2.dl.cox.net (68.1.0.142)  43.859 ms  43.287 ms 44.125 ms
 6  dpr1-ge-2-0-0.dallasequinix.savvis.net (204.70.204.146)  41.927 ms 58.247 ms  44.989 ms
 7  cr2-tengige0-7-5-0.dallas.savvis.net (204.70.196.29)  42.577 ms 46.110 ms  43.977 ms
 8  cr1-pos-0-3-3-0.losangeles.savvis.net (204.70.194.53)  78.070 ms 76.735 ms  76.145 ms
 9  bpr1-ge-3-0-0.LosAngeles.savvis.net (204.70.192.222)  77.533 ms 108.328 ms  120.096 ms
10  wiltel-communications-group-inc.LosAngeles.savvis.net (208.173.55.186)  79.607 ms  76.847 ms  75.998 ms
11  tg9-4.cr01.lsancarc.integra.net (209.63.113.57)  84.789 ms  85.436 ms  85.575 ms
12  tg13-1.cr01.sntdcabl.integra.net (209.63.113.106)  87.608 ms 84.278 ms  86.922 ms
13  tg13-4.cr02.sntdcabl.integra.net (209.63.113.134)  87.284 ms 85.924 ms  86.102 ms
14  tg13-1.cr02.rcrdcauu.integra.net (209.63.114.169)  85.578 ms 85.285 ms  84.148 ms
15  209.63.99.166 (209.63.99.166)  84.515 ms  85.424 ms  85.956 ms
16  208.186.199.158 (208.186.199.158)  86.557 ms  85.822 ms  86.072 ms
17  sac-main.cwo.com (209.210.78.20)  88.105 ms  87.467 ms  87.526 ms
18  slackware.com (64.57.102.34)  85.682 ms  86.322 ms  85.594 ms
</screen>
</section>

<section id="network-utils_telnet">
<title>telnet</title>

<para>
Once upon a time, <application>telnet</application>(1) was the greatest
thing since sliced bread. Basically, <application>telnet</application>
opens an unencrypted network connection between two computers and hands
control of the session to the user rather than some other application.
Using <application>telnet</application>, people could connect to shells
on other computers and execute commands as if they were physically
present. Due to its unencrypted nature this is no longer recommended;
however, <application>telnet</application> is still used for this
purpose by many devices.
</para>

<para>
Today, <application>telnet</application> is put to better use as a
network diagnostic tool. Because it passes control of the session
directly to the user, it can be used for a great variety of testing
purposes. As long as you know what ASCII commands to send to the
receiving computer, you can do any number of activies, such as read web
pages or check your e-mail. Simply inform
<application>telnet</application> what network port to use, and you're
all set.
</para>

<screen><prompt>darkstar:~&#36; </prompt><userinput>telnet www.slackware.com 80</userinput>
Trying 64.57.102.34...
Connected to www.slackware.com.
Escape character is '^]'.
<userinput>HEAD &#47; HTTP&#47;1.1
Host: www.slackware.com
</userinput>
HTTP&#47;1.1 200 OK
Date: Thu, 04 Feb 2010 18:01:35 GMT
Server: Apache&#47;1.3.27 (Unix) PHP&#47;4.3.1
Last-Modified: Fri, 28 Aug 2009 01:30:27 GMT
ETag: "61dc2-5374-4a973333"
Accept-Ranges: bytes
Content-Length: 21364
Content-Type: text&#47;html
</screen>

</section>

<section id="network-utils_ssh">
<title>ssh</title>

<para>
As we mentioned, <application>telnet</application> may be useful as a
diagnostic tool, but its unencrypted nature makes it a security concern
for shell access. Thankfully, there's the secure shell protocol. Nearly
every Linux, UNIX, and BSD distribution today makes use of OpenSSH, or
<application>ssh</application>(1) for short. It is one of the most
commonly used network tools today and makes use of the strongest
cryptographic techniques. <application>ssh</application> has many
features, configuration options, and neat hacks, enough to fill its own
book, so we'll only go into the basics here.  Simply run
<application>ssh</application> with the user name and the host and
you'll be connected to it quickly and safely. If this is the first time
you are connecting to this computer, <application>ssh</application>
will ask you to confirm your desire, and make a local copy of the
encryption key to use. Should this key later change,
<application>ssh</application> will warn you and refuse to connect
because it is possible that some one is attempting to hijack the
connection using what is known as a man-in-the-middle attack.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>ssh alan@slackware.com</userinput>
alan@slackware.com's password: <userinput>secret</userinput>
<prompt>alan@slackware.com:~&#36; </prompt>
</screen>

<para>
The user and hostname are in the same form used by e-mail addresses.
If you leave off the username part, <application>ssh</application> will
use your current username when establishing the connection.
</para>

</section>

<section>
<title>tcpdump</title>

<para>
So far all the tools we've looked at have focused on making connections
to other computers, but now we're going to look at the traffic itself.
<application>tcpdump</application>(1) (which must be run as root)
allows us to view all or part of the network traffic originating or
received by our computer. <application>tcpdump</application> displays
the raw data packets in a variety of ways with all the network headers
intact. Don't be alarmed if you don't understand everything it
displays, <application>tcpdump</application> is a tool for professional
network engineers and system administrators. By default, it probes the
first network card it finds, but if you have multiple interfaces,
simply use the <arg>-i</arg> argument to specify which one you're
interested in.  You can also limit the data displayed using expressions
and change the manner in which it is displayed, but that is best
explained by the man page and other reference material.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>tcpdump -i wlan0</userinput>
tcpdump: verbose output suppressed, use -v or -vv for full protocol
decode
listening on wlan0, link-type EN10MB (Ethernet), capture size 96 bytes
13:22:28.221985 IP gw.ctsmacon.com.microsoft-ds &#62; 192.168.1.198.59387:
Flags [P.], ack 838190560, win 3079, options [nop,nop,TS val 1382697489
ecr 339048583], length 164WARNING: Short packet. Try increasing the
snap length by 140
SMB PACKET: SMBtrans2 (REPLY)

13:22:28.222392 IP 192.168.1.198.59387 &#62; gw.ctsmacon.com.microsoft-ds:
Flags [P.], ack 164, win 775, options [nop,nop,TS val 339048667 ecr
1382697489], length 134WARNING: Short packet. Try increasing the snap
length by 110
SMB PACKET: SMBtrans2 (REQUEST)
</screen>

</section>

<section id="network-utils_nmap">
<title>nmap</title>

<para>
Suppose you need to know what network services are running on a
machine, or multiple machines, or you wish to determine if multiple
machines are responsive?  You could <application>ping</application>
each one individually, <application>telnet</application> to each port
you're interested in, and note every detail, but that's very tedious
and time consuming. A much easier alternative is to use a port scanner,
and <application>nmap</application>(1) is just the tool for the job.
<application>nmap</application> is capable of scanning TCP and UDP
ports, determining the operating system of a network device, probing
each located service to determine its specific type, and much much
more.  Perhaps the simplist way to use <application>nmap</application>
is to "ping" multiple computers at once. You can use network address
notation (CIDR) or specify a range of addresses and
<application>nmap</application> will scan every one and return the
results to you when it's finished. You can even specify host names as
you like.
</para>

<para>
In order to &#34;ping&#34; hosts, you'll have to use the <arg>-sP</arg>
argument. The following command instructs
<application>nmap</application> to &#34;ping&#34; www.slackware.com and the 16
IP addresses starting at 72.168.24.0 and ending at 72.168.24.15.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>nmap -sP www.slackware.com 72.168.24.0/28</userinput>
</screen>

<para>
Should you need to perform a port scan, <application>nmap</application>
has many options for doing just that. When run without any arguments,
<application>nmap</application> performs a standard TCP port scan on all
hosts specified. There are also options to make
<application>nmap</application> more or less aggressive with its
scanning to return results quicker or fool intrusion detection
services. For a full discussion, you should refer to the rather
exhaustive man page. The following three commands perform a regular
port scan, a SYN scan, and a &#34;Christmas tree&#34; scan.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>nmap www.example.com</userinput>
<prompt>darkstar:~&#35; </prompt><userinput>nmap -sS www.example.com</userinput>
<prompt>darkstar:~&#35; </prompt><userinput>nmap -sX www.example.com</userinput>
</screen>

<warning>
  <para>
    Be warned! Some Internet Service Providers frown heavily on port
    scanning and may take measures to prevent you from doing it.
    <application>nmap</application> and applications like it are best
    used on your own systems for maintenance and security purposes,
    not as general purpose Internet scanners.
  </para>
</warning>

</section>

<section id="network-utils_host">
<title>host</title>

<para>
Often network problems stem from a failure of DNS (Domain Name Service)
which maps domain names to IP addresses. An easy way to perform quick
DNS lookups is the <application>host</application>(1) command. When
this is run, your computer will perform a few common DNS lookups and
return the results.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>host www.slackware.com</userinput>
www.slackware.com is an alias for slackware.com.
slackware.com has address 64.57.102.34
slackware.com mail is handled by 1 mail-mx.cwo.com.
</screen>

</section>

<section>
<title>dig</title>

<para>
More complex DNS lookups can be manually performed with the
<application>dig</application>(1) tool.  <application>dig</application>
is "the meanest dog in the pound" when it comes to troubleshooting DNS
issues. With this tool, you can perform virtually any DNS lookup from
reverse lookups to A, CNAME, MX, SP, TXT records and more. There are
far too many command-line options and lookup types to go into depth
here, but the man page lists all the common use cases.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>dig @207.69.188.185 www.slackware.com a</userinput>

&#59; &lt;&lt;&gt;&gt; DiG 9.4.3-P4 &lt;&lt;&gt;&gt; @207.69.188.185 www.slackware.com a
&#59; (1 server found)
&#59;&#59; global options:  printcmd
&#59;&#59; Got answer:
&#59;&#59; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 57965
&#59;&#59; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 2, ADDITIONAL: 0

&#59;&#59; QUESTION SECTION:
&#59;www.slackware.com.		IN	A

&#59;&#59; ANSWER SECTION:
www.slackware.com.	86400	IN	CNAME	slackware.com.
slackware.com.		86400	IN	A	64.57.102.34

&#59;&#59; AUTHORITY SECTION:
slackware.com.		86400	IN	NS	ns2.cwo.com.
slackware.com.		86400	IN	NS	ns1.cwo.com.

&#59;&#59; Query time: 348 msec
&#59;&#59; SERVER: 207.69.188.185#53(207.69.188.185)
&#59;&#59; WHEN: Sat Jul  3 16:25:10 2010
&#59;&#59; MSG SIZE  rcvd: 105

</screen>

<para>
Let's take a took at the command-line options used above.  The
<arg>@207.69.188.185</arg> argument tells
<application>dig</application> what DNS server to query. If it is not
specified, <application>dig</application> will simply use whatever
servers are listed in <filename>&#47;etc&#47;resolv.conf</filename>.  The
<arg>a</arg> argument at the end is the type of DNS record to lookup.
In this case we looked for an "A" record which returned an IPv4 address.
</para>

</section>

<section><title>finger</title>

<para>
<application>finger</application>(1) isn't exactly a network diagnostic
tool as much as it is a network-user diagnostic tool. Using
<application>finger</application>, you can gather a handful of useful
information about users on servers running the
<application>fingerd</application>(8) daemon. Today very few servers
still offer <application>fingerd</application>, but for those that do
it can be a useful tool for keeping track of your friends and
co-workers.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>finger alan@cardinal.lizella.net</userinput>
[cardinal.lizella.net]
Login: alan           			Name: Alan Hicks
Directory: &#47;home&#47;alan               	Shell: /bin/bash
Office: 478 808 9919, 478 935 8133
On since Wed Apr 13 17:43 (UTC) on pts&#47;9 from
75-150-12-113-atlanta.hfc.comcastbusiness.net
    32 minutes 24 seconds idle
     (messages off)
On since Wed Apr 13 17:45 (UTC) on pts&#47;10 from :pts/9:S.0
   48 minutes 56 seconds idle
Mail forwarded to alan@lizella.net
No mail.
No Plan.
</screen>

</section>

</section>

<section id="network-utils_web-browsers">
<title>Web Browsers</title>

<para>
Slackware includes a variety of web browsers. If you're using a
graphical desktop, you'll find <application>Firefox</application>,
<application>Seamonkey</application>, and others you may already be
familiar with, but what about console access? Fortunately, there are a
number of capable web browsers here as well.
</para>

<section id="network-utils_lynx">
  <title>lynx</title>

<para>
The oldest console-based web browser included with Slackware is
definitely <application>lynx</application>(1), a very capable if
somewhat limited web browser.  <application>lynx</application> does not
support frames, javascript, or pictures; it is strictly a text web
browser. Navigation is performed using your keyboard's arrow keys and
optionally, a mouse. While it lacks many features that other browsers
support, <application>lynx</application> is one of the fastest web
browsers you'll ever use for gathering information. For example, the
<arg>-dump</arg> argument sends the formatted web page directly to the
console, which can then be piped to other programs.
</para>

<imagedata fileref="img/lynx.png" format="PNG"/>

</section>

<section id="network-utils_links">
<title>links</title>

<para>
A more feature-rich alternative is the popular
<application>links</application>(1), a console-based web browser that
supports frames and has better table rendering than
<application>lynx</application>. Like its predecessor,
<application>links</application> is navigated with the arrow keys, and
the use of a mouse is supported.  Unlike,
<application>lynx</application> it also includes a handy menu (simply
click on the top line with your mouse to activate) and generally
formats web pages better.
</para>

<imagedata fileref="img/links.png" format="PNG"/>

</section>

<section><title>wget</title>

<para>
Unlike the other browsers we've looked at,
<application>wget</application>(1) is non-interactive. Rather than display
HTTP content, <application>wget</application> downloads it. This takes
the "browsing" out of the web browser. Unlike the dump modes of other
browsers, <application>wget</application> does not format its
downloads; rather it copies the content in its exact form on the web
server with all tags and binary data in place. It also supports several
recursive options that can effectively mirror online content to your
local computer.  <application>wget</application> need not operate
exclusively on HTTP content; it also supports FTP and several other
protocols.
</para>

<screen><prompt>darkstar:~&#35; </prompt><userinput>wget ftp:&#47;&#47;ftp.osuosl.org&#47;pub&#47;slackware&#47;slackware-current&#47;ChangeLog.txt</userinput>
--2010-05-01 13:51:19--
ftp:&#47;&#47;ftp.osuosl.org&#47;pub&#47;slackware&#47;slackware-current&#47;ChangeLog.txt
           =&#62; `ChangeLog.txt'
Resolving ftp.osuosl.org... 64.50.236.52
Connecting to ftp.osuosl.org|64.50.236.52|:21... connected.
Logging in as anonymous ... Logged in!
==&#62; SYST ... done.    ==&#62; PWD ... done.
==&#62; TYPE I ... done.  ==&#62; CWD &#47;pub&#47;slackware&#47;slackware-current ...  done.
==&#62; SIZE ChangeLog.txt ... 75306
==&#62; PASV ... done.    ==&#62; RETR ChangeLog.txt ... done.
Length: 75306 (74K)

100%[======================================&#62;] 75,306       110K/s   in 0.7s    

2010-05-01 13:51:22 (110 KB/s) - `ChangeLog.txt' saved [75306]
</screen>

</section>

</section>

<section id="network-utils_mail-clients">
<title>Mail Clients</title>

<section><title>pine</title>

<para>
<application>pine</application> is one of the oldest command-line
interface mail clients still in existance and remains one of the most
user-friendly. <application>pine</application> was created by the
University of Washington and carries with it both a trademark and a
copyright license that are difficult to work with. Thankfully back in
2005, the university saw fit to re-write it without the trademark and
with a more open license, so <application>alpine</application>(1), the
pine-clone distributed with Slackware, was born.
</para>

<para>
To start using <application>alpine</application>,
simply type <application>pine</application> at the command line.
Using it is very simple due to its menu-driven system as well as the
command referance neatly located at the bottom of the screen. See for
yourself&#58;
</para>

<screen>
  ALPINE 2.00   MAIN MENU              Folder: INBOX               No
Messages  


          ?     HELP               -  Get help using Alpine           

          C     COMPOSE MESSAGE    -  Compose and send a message      

          I     MESSAGE INDEX      -  View messages in current folder 

          L     FOLDER LIST        -  Select a folder to view         

          A     ADDRESS BOOK       -  Update address book             

          S     SETUP              -  Configure Alpine Options        

          Q     QUIT               -  Leave the Alpine program        


                  Copyright 2006-2008 University of Washington
                    [Folder "INBOX" opened with 0 messages]
? Help                     P PrevCmd                 R RelNotes                 
O OTHER CMDS > [ListFldrs] N NextCmd                 K KBLock                  
</screen>

</section>

<section id="network-utils_mutt">
  <title>mutt</title>

<para>
Some people don't like <application>pine</application>. Some people
want more control. Some people want a fully-configurable mail client
with plugin support and a no-nonsense attitude. Those people use
<application>mutt</application>(1). <application>mutt</application>
isn't as user friendly as <application>pine</application>, but makes up
for it with power. You won't find the user-friendly command referance
at the bottom of the screen, <application>mutt</application> uses every
last inch of real-estate for mail processing duty. It's feature support
is extensive: threaded displays are no problem for the mighty
mixed-breed! You can configure <application>mutt</application> with a
<filename>.muttrc</filename> file in your home directory. With all the
many different possible configuration options, there's even a man page
for that, muttrc(5). You might want to read up on it.
</para>

<screen>
3172 N   Jan 17 Thomas Morper   (2.8K)     │ └─>Re: [Slackbuilds-users] Exim Sbo
3173 N   Jan 17 TuxaneMedia     (2.5K)     └─>Re: [Slackbuilds-users] Exim Sbo
3174 N   Jan 06 Uli Sch?fer     (4.6K) [Slackbuilds-users] mrtg-2.15.2 breaks wi
3175 N   Jan 06 Willy Sudiarto  (4.0K) └─>
3176 N   Jan 06 Audrius Ka??uka (3.9K)   └─>
3177 N   Jan 06 Niels Horn      (4.4K)     └─>
3178 N * Jan 09 King Beowulf    (6.5K) [Slackbuilds-users]  libreoffice (3.3.0rc
3179 N * Jan 09 Niels Horn      (4.8K) └─>Re: [Slackbuilds-users] libreoffice (3
3180   * Jan 09 Niels Horn      (  73)   └─>                                    
3181 N * Jan 09 King Beowulf    (5.9K)     └─>
3182 N   Jan 10 Robby Workman   (7.8K) [Slackbuilds-users] Updates - 20110110
3183 N   Jan 10 B Watson        (3.6K) [Slackbuilds-users] Fwd: nted slackbuild
3184 N   Jan 11 SlackBuilds@cat (2.5K) [Slackbuilds-users] /usr/share/ package s
3185 N   Jan 11 Robby Workman   (3.4K) └─>
3186 N   Jan 12 SlackBuilds@cat (3.4K)   └─>
3187 N   Jan 11 Robby Workman   (4.5K)     └─>
3188 N   Jan 12 Robby Workman   (2.3K) [Slackbuilds-users] Unavailability of mai
3189 N   Jan 13 Mr. B-o-B       (3.7K) └─>
3190 N   Jan 13 Josiah Boothby  (3.2K) [Slackbuilds-users] Ted's Word Processor
3191 N   Jan 14 Adam Swift      (7.4K) [Slackbuilds-users] Web submission failur
3192 N   Jan 14 Rob McGee       (3.5K) └─>
</screen>

</section>

<section id="network-utils_mailx">
  <title>mailx</title>

<para>
So those are great and everything, but what if you just want a mail
client that isn't menu-driven? Thankfully
<application>mailx</application> is here to save you. 
</para>

<para>
  <application>mailx</application> is based on the Berkeley Mail
  application, with a <application>mail</application> command
  appearing as early as Version 1 of AT&#38;T&#39;s UNIX. It can be
  used either interactively or non-interactively.
</para>

<para>
  To launch <application>mailx</application>, type
  <command>mail</command> at a shell prompt.
  <application>mailx</application> reads mail from your computer's
  mail spool and displays the usual combination of sender, subject,
  status, and size in a list, leaving the user at an interactive
  prompt. In fact, it might look familiar to you if you bothered
  checking your mail immediately after installing Slackware and read
  Pat Volkerding's greeting.
</para>

<screen>
root@darkstar:&#47;home&#47;klaatu&#35; mail
Heirloom mailx version 12.4 7&#47;29&#47;08.  Type ? for help.
"&#47;var&#47;spool&#47;mail&#47;root": 2 messages 2 new
&#62;N  1 To root            Thu Mar 10 23:33   52&#47;1902  Register with the Linux counter project
 N  2 To root            Thu Mar 10 23:35  321&#47;15417 Welcome to Linux (Slackware 13.37)!
&#63;
</screen>

<para>
  To read a message, enter the number of the message at the
  prompt. This displays the message using
  <application>more</application>, so use the <keycap>RETURN</keycap>
  key to view the next page. Once the end of the message has been
  reached, press <keycap>q</keycap> to return to the list view, or
  <keycap>RETURN</keycap> to continue to the next message.
</para>

<para>
  To see a list of available commands, type &#63; at the
  <application>mail</application> prompt; using the commands provided,
  you can view the headers of mail in the spool, reply, delete, save,
  and many other common email tasks.
</para>

<para>
  <application>mailx</application> is most powerful when used in
  scripting. For all of the options available for
  <application>mailx</application>, view its man page. A simple way to
  send an email to someone requires only the command itself and the
  destination address&#58;
</para>

<screen>
  <prompt>darkstar:~&#36; </prompt> <command>mail</command>
  alan@lizella.net
</screen>

<para>
  After the command has been issued, an interactive prompt appears for
  a subject line, the message body, and the end character (a single
  dot on an otherwise empty line).
</para>

<para>
  <application>mailx</application> can be used entirely without human
  intervention, however. Generally, it's safe to assume that any
  attribute you can define in the interactive shell for
  <application>mailx</application> can also be defined while scripting
  it or using it as one non-interactive command&#58;
</para>

<screen>
  <prompt>darkstar:~&#36; </prompt> <command>mail</command> -n -s "Test message" alan@lizella.net &#60; ~&#47;message.txt
</screen>

<para>
  In this example, the contents of the file
  <filename>message.txt</filename> would be sent as the message body
  to the specified recipient. No interaction from the user is required.
</para>

<para>
  Within one's own computer (localhost) or one's own network, sending
  email in this manner is entirely possible. But over the internet a
  few more steps are usually required along the way. Of course, most
  notably there is usually an smtp server handling the delivery of your
  email. This, too, can be specified as part of your
  <application>mail</application> command&#58;
</para>

<screen>
  <prompt>darkstar:~&#36; </prompt> env MAILRC=&#47;dev&#47;null
  from="klaatu@slackermedia.info (Klaatu)"
  smtp=relay.slackermedia.info <command>mail</command> -n -s "Test message" alan@lizella.net &#60; ~&#47;message.txt
</screen>

<para>
  In this case, the <varname>MAILRC</varname> variable is set to
  &#47;dev&#47;null in order to override any system defaults, and the
  smtp server as well as the <parameter>FROM&#58;</parameter> line are
  defined. The rest of the command is the same as using
  <application>mailx</application> internally within one's own
  computer or network.
</para>

<para>
  Over all, <application>mailx</application> is usually viewed as a
  mail client with the bare-minimum features; this is largely true,
  but when you need to be able to script sending notification emails
  or important update messages, it quickly becomes a lot more valuable
  than a fully interactive application like
  <application>pine</application> or <application>mutt</application>.
</para>

</section>

</section>

<section id="network-utils_ftp">
<title>FTP Clients</title>

<para>
Lots of data is stored on FTP servers the world over. In fact,
Slackware Linux was first publically offered via FTP and continues to
be distributed in this fashion today. Most open source software can be
downloaded in source code or binary form via FTP, so knowing how to
retrieve this information is a handy skill.
</para>

<section><title>ftp</title>

<para>
The simplest FTP client included with Slackware is named simply,
<application>ftp</application>(1) and is a reliable if somewhat simple
means of sending and retrieving data. <application>ftp</application>
connects to an FTP server, asks for your username and password, and
then allows you to put or get data to and from that server.
<application>ftp</application> has fallen out of favor with more
experienced users do to a lack of features, but remains a handy tool,
and much of the documentation you see online will refer you to it.
</para>

<para>
Once an FTP session has been initialized, you'll be placed at a prompt
somewhat like a shell.  From here you can change and list directories
using the "cd" and "ls" commands, just like a shell.  Additionally, you
may issue the "put" command to send a file to the server, or a "get"
command to retrieve data from the server. If you're connecting to a
public FTP server, you'll want to use the "anonymous" username and
simply enter your e-mail address (or a fake one) for the password.
</para>

<screen><prompt>darkstar:~# </prompt><userinput>ftp ftp.osuosl.org</userinput>
Name (ftp.osuosl.org:alan): <userinput>anonymous</userinput>
331 Please specify the password.
Password: <userinput>secret</userinput>
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> <userinput>cd pub/slackware/slackware-current/</userinput>
250 Directory successfully changed.
ftp> <userinput>get ChangeLog.txt</userinput>
local: ChangeLog.txt remote: ChangeLog.txt
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for ChangeLog.txt (33967
bytes).
226 File send OK.
33967 bytes received in 0.351 secs (94 Kbytes/sec)
ftp> <userinput>bye</userinput>
221 Goodbye.
</screen>

</section>

<section><title>ncftp</title>

<para>
<application>ncftp</application>(1) (pronounced nick-f-t-p), is a more
feature rich successor to <application>ftp</application>, supporting
tab completion and recursive retrieval. It automatically connects to a
server as the anonymous user, unless you specify a different username
on the commandline with the <arg>-u</arg> argument. The primary
advantage over <application>ftp</application> is the ability to send
and retrieve multiple files at once with the "mput" and "mget"
commands. If you pass the <arg>-R</arg> argument to either of them,
they will recursively put or get data from directories.
</para>

<screen><prompt>darkstar:~# </prompt><userinput>ncftp ftp.osuosl.org</userinput>
Logging in...                                                                   
Login successful.
Logged in to ftp.osuosl.org.                                                    
ncftp / > <userinput>cd pub/slackware/slackware-current</userinput>
Directory successfully changed.
ncftp ...ware/slackware-current > <userinput>mget -R isolinux</userinput>
isolinux/README.TXT:                                     4.63 kB 16.77 kB/s  
isolinux/README_SPLIT.TXT:                             788.00 B    5.43 kB/s  
isolinux/f2.txt:                                       793.00 B    5.68 kB/s  
isolinux/initrd.img:                                    13.75 MB 837.91 kB/s  
isolinux/iso.sort:                                      50.00 B  354.50 B/s   
isolinux/isolinux.bin:                                  14.00 kB 33.99 kB/s  
isolinux/isolinux.cfg:                                 487.00 B    3.30 kB/s  
isolinux/message.txt:                                  760.00 B    5.32 kB/s  
isolinux/setpkg:                                         2.76 kB 19.11 kB/s  
ncftp ...ware/slackware-current > <userinput>bye</userinput>
</screen>

</section>

<section><title>lftp</title>

<para>
The last client we're going to look at is
<application>lftp</application>(1).  Like
<application>ncftp</application>, it supports tab completion and
recursive activity, but has a more friendly license.  Rather than user
"mget" and "mput", all recursive operations are handled with the
"mirror" command.  "mirror" has many different options available, so
I'll have to refer you to the man page and the built-in "help" command
for complete details.
</para>

<screen><prompt>darkstar:~# </prompt><userinput>lftp ftp.osuosl.org</userinput>
lftp ftp.osuosl.org:~> <userinput>cd /pub/slackware/slackware-current</userinput>
cd ok, cwd=/pub/slackware/slackware-current            
lftp ftp.osuosl.org:/pub/slackware/slackware-current> <userinput>mirror isolinux</userinput>
Total: 2 directories, 16 files, 1 symlink                                      
New: 16 files, 1 symlink
14636789 bytes transferred in 20 seconds (703.7K/s)
lftp ftp.osuosl.org:/pub/slackware/slackware-current> <userinput>bye</userinput>
</screen>

</section>

</section>

<section>
<title>rsync</title>

<para>
Ready to see something cool? Have you ever found yourself needing just
a handful of files from a large directory, but you're not entirely sure
which files you already have and which ones you need? You can download
the entire directory again, but that's duplicating a lot of work. You
can pick and chose, manually check everything, but that's very tedious.
Perhaps you've downloaded a large file such as an ISO, but something
went wrong with the download? It doesn't make sense that you should
have to pull down the entire file again if only a few bits have been
corrupted.  Enter <application>rsync</application>(1), a fast and
versatile copying tool for local and remote files.
</para>

<para>
<application>rsync</application> uses a handful of simple, but very
effective techniques to determine what needs to be changed. By checking
file size and time stamps, it can determine if two files are different.
If something has changed, it can determine what bytes are different,
and simply download that handfull of data rather than an entire file.
It is truly a marvel of modern technology.
</para>

<para>
In its simplist form, <application>rsync</application> connects to an
rsync protocol server and downloads a list of files and directories,
along with their sizes, timestamps, and other information. It then
compares this to the local files (if any) to determine what it needs to
transfer. Only files that are different will be synced.  Additionally,
it breaks up large files into smaller chunks and compares those chunks
using a quick and simple hash function. Any chunks that match are not
transferred, so the amount of data that must be copied can be
dramatically reduced.  <application>rsync</application> also supports
compression, verbose output, file deletion, permission handling, and
many other options. For a complete list, you'll need to refer to the
man page, but I've included a small table of some of the more common
options.
</para>

<table pgwide="0">
<title>rsync Arguments</title>
<tgroup cols="2">
  <thead>
    <entry>Argument</entry>
    <entry>Explaination</entry>
  </thead>
  <tbody>
    <row>
      <entry>-v</entry>
      <entry>Increased verbosity</entry>
    </row>
    <row>
      <entry>-c</entry>
      <entry>Checksum all files rather than relying on file size and timestamp</entry>
    </row>
    <row>
      <entry>-a</entry>
      <entry>Archive mode (equivilant to -rlptgoD)</entry>
    </row>
    <row>
      <entry>-e</entry>
      <entry>Specify a remote shell to use</entry>
    </row>
    <row>
      <entry>-r</entry>
      <entry>Recursive mode</entry>
    </row>
    <row>
      <entry>-u</entry>
      <entry>Update - skip files that are newer on the receiving end</entry>
    </row>
    <row>
      <entry>-p</entry>
      <entry>Preserve permissions</entry>
    </row>
    <row>
      <entry>-n</entry>
      <entry>Dry-run - perform a trial run without making any changes</entry>
    </row>
    <row>
      <entry>-z</entry>
      <entry>Compress - handy for slow network connections</entry>
    </row>
  </tbody>
</tgroup>
</table>

<para>
Due to the power and versatility of <application>rsync</application>,
it can be invoked in a number of ways.  The following two examples
connect to an rsync protocol server to retrieve some information and to
another server via ssh to encrypt the transmission.
</para>

<screen><prompt>darkstar:~# </prompt><userinput>rsync -avz rsync://ftp.osuosl.org/pub/slackware/slackware-current/ \
/src/slackware-current/</userinput>
<prompt>darkstar:~# </prompt><userinput>rsync -e ssh ftp.slackware.com:/home/alan/foo /tmp/foo</userinput>
</screen>

</section>

</chapter>
